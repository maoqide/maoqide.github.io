<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maoqide</title>
    <link>/</link>
    <description>Recent content on Maoqide</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Dec 2018 18:37:11 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build Blog With Hugo</title>
      <link>/notes/build-blog-with-hugo/</link>
      <pubDate>Tue, 04 Dec 2018 18:37:11 +0800</pubDate>
      
      <guid>/notes/build-blog-with-hugo/</guid>
      <description>documentations https://gohugo.io/getting-started/usage/ https://learn.netlify.com/en/
setup  install hugo following offical install guide.
download packages from Hugo Release and put executale file hugo in PATH.
 execute hugo new site sitename, To create a new site. directory structure will like this:
. ├── archetypes ├── assets ├── config.toml ├── content ├── data ├── layouts ├── static └── themes  download theme from github. unzip the archive and copy files to you site dir, overwriting directory and files of the same name.</description>
    </item>
    
    <item>
      <title>Collection 1</title>
      <link>/collection/collection-1/</link>
      <pubDate>Mon, 03 Dec 2018 21:38:12 +0800</pubDate>
      
      <guid>/collection/collection-1/</guid>
      <description> Mesos 的资源分配，解释 mesos 的二级调度和资源邀约机制，并详细介绍了保证资源分配公平的DRF算法（主导资源公平算法 Dominant Resource Fairness）。
https://www.infoq.cn/article/analyse-mesos-part-04
备用链接
 Kubernetes调度详解。
http://dockone.io/article/2885
备用链接
https://cizixs.com/2017/07/19/kubernetes-scheduler-source-code-analysis/
备用链接
 Istio 调用链埋点/tracing: 使用 istio 做调用链跟踪依旧需要修改一定业务代码，微服务间请求时需要配合在请求头上传递 sidecar 生成的 Trace 相关信息，才能将调用关联到同一个 trace 上，否则每次请求都会形成新的割裂的 Trace 信息。
https://www.infoq.cn/article/pqy*PFPhox9OQQ9iCRTt
备用链接
  </description>
    </item>
    
    <item>
      <title>Goroutine 的管理</title>
      <link>/golang/goroutine/</link>
      <pubDate>Fri, 28 Dec 2018 16:29:32 +0800</pubDate>
      
      <guid>/golang/goroutine/</guid>
      <description>goroutine 是 go 的最重要特性之一，可以方便的实现并发编程。但是真正用起来，如果不多加注意，很容易造成 goroutine 的泄漏或者脱离管理，造成代码跑一段时间，就是产生大量无法回收的goroutine(可通过 pprof 查看)。最近学习整理了下 go 语言中管理 goroutine 的几种方法和一些最佳实践。
几点原则 go-best-practices-concurrency
在 github上的 go-best-practices 项目中，提到了几点最佳实践，这里记录下。
不要和 goroutine 失去联系  Don&amp;rsquo;t loose contact with your goroutines
 如何避免? 使用make(chan struct{})/sync.WaitGroup/context.Context或select。
你可能需要这样：
1. 当必要的时候可以*中断*创建的 goroutine。
2. 等待直到产生的所有 goroutine 都完成了。
中断(Interruption)
可以用以下方式实现：
1. 共享一个无缓冲的空结构体通道（make（chan struct {}）），由 goroutine 的创建者发出关闭信号以关闭。
2. 一个可取消的context.Context。
3. 确保你的 goroutine 使用select来不时检查他们的信号，而不会无限期地阻塞住。
等待 goroutine 完成(Waiting for goroutines to finish)
实现的最简单方法是使用sync.WaitGroup。在创建 goroutine 之前，请确保调用了wg.Add(1)。在运行 goroutine 之后，但在它 return 之前，请确保wg.Done()。这种场景下，defer是很好的选择。
不要用 WaitGroup 来计数多种类型的 goroutine  Don&amp;rsquo;t use wait groups to count more than one type of goroutine</description>
    </item>
    
    <item>
      <title>Apiserver</title>
      <link>/cloud/apiserver/</link>
      <pubDate>Wed, 21 Nov 2018 19:46:06 +0800</pubDate>
      
      <guid>/cloud/apiserver/</guid>
      <description>&lt;p&gt;k8s apiserver 源码阅读笔记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阿里云主机搭建 K8S 集群</title>
      <link>/cloud/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%90%AD%E5%BB%BA-k8s-%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 14 Nov 2018 14:31:38 +0800</pubDate>
      
      <guid>/cloud/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%90%AD%E5%BB%BA-k8s-%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;p&gt;通过阿里云ECS实例搭建K8S集群&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>/collection/clooection-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/collection/clooection-2/</guid>
      <description> goroutine 调度器解析。
https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/
备用链接
 Golang for range性能分析及优化: for range 会有元素拷贝操作，造成性能方面的影响。
golang for range
备用链接
 一致性哈希算法。
https://segmentfault.com/a/1190000013533592
备用链接
  </description>
    </item>
    
  </channel>
</rss>